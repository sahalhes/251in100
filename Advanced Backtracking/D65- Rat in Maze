#include <bits/stdc++.h>

//DLRU ->lexicographical order 
bool safe(int row, int col, int n, vector<vector<int>>& maze, vector<vector<int>>& path) {
    if (row >= 0 && row < n && col >= 0 && col < n && path[row][col] == 0 && maze[row][col] == 1) {
        return true;
    }
    return false;
}
void getpath(int row, int col, int n, vector<vector<int>>& maze, vector<vector<int>>& ans, vector<vector<int>>& path) {
    if (row == n - 1 && col == n - 1) {
         vector<int> temp;
    path[row][col]=1;
    for(int k=0;k<n;k++)
    {
      for(int l=0;l<n;l++)
      {
        temp.push_back(path[k][l]);
      }
    }
    path[row][col]=0;
    ans.push_back(temp);
    return;
    }
    path[row][col] = 1;

    // Down
    if (safe(row + 1, col, n, maze, path)) {

        getpath(row + 1, col, n, maze, ans, path);

    }
    // Left
    if (safe(row, col - 1, n, maze, path)) {

        getpath(row, col - 1, n, maze, ans, path);

    }

     // Right
    if (safe(row, col + 1, n, maze, path)) {

        getpath(row, col + 1, n, maze, ans, path);

    }    
    // Up
    if (safe(row - 1, col, n, maze, path)) {

        getpath(row - 1, col, n, maze, ans, path);

    }    
    path[row][col] = 0;

}

 

vector<vector<int>> ratInAMaze(vector<vector<int>>& maze, int n) {

    vector<vector<int>> ans;
    vector<vector<int>> path(n, vector<int>(n, 0));
    if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) {
        return ans; 
    }
    getpath(0, 0, n, maze, ans, path);

    return ans;

}