bool dfs(int node, int vis[], int pathvis[], vector<int>adj[])
{
  vis[node] = 1;
  pathvis[node] = 1;

  for(auto it:adj[node])
  {
    if(!vis[it])
    {
      if(dfs(it,vis,pathvis,adj)==true)
        return true;
    }
    else if(pathvis[it]==1)
      return true;
  }
  pathvis[node]=0;
  return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges)
{
  vector<int>adj[n+1];
  for(auto it:edges)
    adj[it.first].push_back(it.second);

  int vis[n+1] = {0};
  int pathvis[n+1] = {0};

  for(int i = 0; i < n+1; i++)
  {
    if(!vis[i])
    {
      if(dfs(i,vis,pathvis,adj)==true)
          return 1;
    }
  }
  return 0;
}