//ADD AT BEGINNING

/**
 * Definition of linked list
 * class Node {
 *
 * public:
 *     int data;
 *     Node* next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node* next) : data(x), next(next) {}
 * };
 */

Node* insertAtFirst(Node* head, int newValue) {
    // Write your code here
    Node *temp=new Node();
    temp->data=newValue;
    temp->next=head; //next of temp is head
    head=temp; //head point to address of newnode
    return head;

}

//ADD AT A POSITION

/************************************************************

    Following is the LinkedList class structure:

    class Node {
    public:
        int data;
        Node *next;

        Node(int val) {
            this->data = val;
            next = NULL;
        }
        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
};

************************************************************/

Node * insert(Node * head, int n, int pos, int val) {
    // Write your code here
    if(pos==0){
        Node*temp=new Node(val);
        temp->next=head;
        head=temp;
        return head;
    }

    Node*temp=head;
    int i=1;
    while(i<pos){
        temp=temp->next;
        i++;
    }
    Node *newnode = new Node(val);
    newnode->next=temp->next;
    temp->next=newnode;
    return head;

}

//ADD AT END

void append(node **head_ref, int newData){
    
    node *newNode = new node();
    newNode->data = newData;
    newNode->next = NULL;
    
    node *last = *head_ref;
    
    if(*head_ref == NULL){
        *head_ref = newNode;
        return;
    }
    
    while(last->next != NULL){
        last = last->next;
    }
    
    last->next = newNode;
    return;
    
}

//DELETION
void deleteNode(node **head_ref , int key){
    // initialise prev and temp
    node *prev, *temp;
    
    //store head to the temp;
    temp  = *head_ref;
    
    //if key is present in head
    if(temp!=NULL && temp->data == key){
        *head_ref = temp->next;
        free(temp);
        return;
    }
    
    //we traverse the linkedlist and keep track og prev node
    // because we have to perform prev->next
    
    while(temp!=NULL && temp->data!=key){
        prev=temp;
        temp = temp->next;
    }
    
    // we travserse whole linked list and we didn't got the key
    if(temp==NULL) return;
    
    // but, if we found the key
    prev->next = temp->next;
    free(temp);
}