int maxProfit(vector<int>& prices) {
    int n = prices.size();
    if (n <= 1) return 0;

    vector<vector<int>> dp(3, vector<int>(2, 0));

    for (int k = 0; k <= 2; ++k) {
        dp[k][1] = -prices[0];
    }

    for (int i = 1; i < n; ++i) {
        for (int k = 1; k <= 2; ++k) {
            dp[k][0] = max(dp[k][0], dp[k][1] + prices[i]);
            dp[k][1] = max(dp[k][1], dp[k - 1][0] - prices[i]);
        }
    }
    return max({dp[0][0], dp[1][0], dp[2][0]});
}

//with fee and mulltiple transaction 
 int maxProfit(vector<int>& prices, int fee) {
        int t1 = 0 , t2=INT_MIN;

        for(int price:prices){
            int t1_old = t1;
            t1 = max(t1,t2+price);
            t2 = max(t2,t1-price-fee);
        }
        return t1;
    }
