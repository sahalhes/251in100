//Short
#include<bits/stdc++.h>
bool f(int i,int j,int k,string s1,string s2,string s3,vector<vector<int>> &dp){
	if(k < 0) return (i<0 && j<0);
	if(i < 0) return s2.substr(0,j+1) == s3.substr(0,k+1);
	if(j < 0) return s1.substr(0,i+1) == s3.substr(0,k+1);
	if(dp[i][j] != -1) return dp[i][j];
	return dp[i][j] = ((s1[i] == s3[k])&&(f(i-1,j,k-1,s1,s2,s3,dp))) || ((s2[j] == s3[k])&&(f(i,j-1,k-1,s1,s2,s3,dp)));

}
bool isInterleave(string s1, string s2, string s3){
	int n = s1.size() , m = s2.size() , k = s3.size();
	vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
	return f(n-1,m-1,k-1,s1,s2,s3,dp);
}

//Understandable 
#include <bits/stdc++.h>
bool isInterleave(string a, string b, string c) {

    int n = a.size(), m = b.size();
    // Check if lengths of a and b add up to the length of c

    if (n + m != c.size()) return false;
    // dp[i][j] represents whether the first i characters of 'a' and first j characters of 'b'
    // can interleave to form the first i+j characters of 'c'.
    vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));

    // Base case: empty string is an interleaving of two empty strings
    dp[0][0] = true;
    // Fill the first row (representing a empty string) of dp

    for (int j = 1; j <= m; ++j) {
        if (b[j - 1] == c[j - 1])
            dp[0][j] = dp[0][j - 1];
    } 
    // Fill the first column (representing b empty string) of dp

    for (int i = 1; i <= n; ++i) {
        if (a[i - 1] == c[i - 1])
            dp[i][0] = dp[i - 1][0];
    }
    // Fill the dp table using the recurrence relation
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if ((a[i - 1] == c[i + j - 1] && dp[i - 1][j]) || (b[j - 1] == c[i + j - 1] && dp[i][j - 1]))
                dp[i][j] = true;
       }
    }
    return dp[n][m];

}