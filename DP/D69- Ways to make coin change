long solve(int i, int n, int* d, int total, int value, vector<vector<long>>& dp){
    if(value == total) return 1;
    else if(i == n || total > value) return 0;
    else if(dp[i][total] != -1) return dp[i][total];
    else{
        long result = 0;
        result += solve(i, n, d, total + d[i], value, dp);
        result += solve(i + 1, n, d, total, value, dp);
        return dp[i][total] = result;
    }
}

long countWaysToMakeChange(int* denominations, int n, int value){
    vector<vector<long>> dp(n + 1, vector<long>(value + 1, -1));
    return solve(0, n, denominations, 0, value, dp);
}