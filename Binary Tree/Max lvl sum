/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxlvl=1;

    void func(TreeNode* root){
        if(!root) return;
        int maxi=root->val;

        std::queue<std::pair<TreeNode*, int>> q;
        q.push({root,1});
        int lvl=1;
        while(!q.empty()){
            int n = q.size();
            int sum=0;

            for(int i=0;i<n;i++){
                TreeNode* curr = q.front().first;
                int currlvl = q.front().second;
                q.pop();
                sum+=curr->val;
                if(curr->left) q.push({curr->left,currlvl+1});
                if(curr->right) q.push({curr->right,currlvl+1});
            }
            if(sum>maxi){
                maxi=sum;
                maxlvl=lvl;
            }
            lvl++;
        }

    }

    int maxLevelSum(TreeNode* root) {
        func(root);
        return maxlvl;
    }
};