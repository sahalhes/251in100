vector<int> zigZagTraversal(BinaryTreeNode<int> *root){
    queue<BinaryTreeNode<int>*>q;
    vector<int>ans;
    if(!root)return ans;
    q.push(root);
    int level=0;
    while(!q.empty()){
        int n = q.size();
        vector<int>temp;
        while(n--){
            auto curr = q.front();
            temp.push_back(curr->data);
            q.pop();
            if(curr->left)q.push(curr->left);
            if(curr->right)q.push(curr->right);
        }
        if(level)reverse(temp.begin(),temp.end()); //Odd false, Even true
        ans.insert(ans.end(),temp.begin(),temp.end());
        level=!level;

    }

    return ans;

}



void zzlevel(Node *root,vector<vector<int>>&ans;){
    if(root==NULL) return ans;
    queue<Node*> q;
    q.push(root);
    int lvl =0;
    while(1){
        int size = q.size();
        if(size==0) return ans;
        vector<int> data;
        lvl++;
        while(size>0){
            Node* temp = q.front();
            q.pop();
            data.push_back(temp->val);
            if(temp->left!=NULL) q.push(temp->left);
            if(temp->right!=NULL) q.push(temp->right);
            size--;
        }
        if(lvl%2==0) reverse(data.begin(),data.end()); //even index right to left 
        ans.push_back(data);
    }

}