//brute 
double median(vector<int>& a, vector<int>& b) {
	// Write your code here.
    double ans;
    vector<int>temp;
    for(int i=0;i<a.size();i++){
        temp.push_back(a[i]);
    }
    for(int i=0;i<b.size();i++){
        temp.push_back(b[i]);
    }
    sort(temp.begin(),temp.end());
    int n = temp.size();
    if(n%2==0) {
        ans=(temp[n/2]+temp[(n/2)-1]);
        ans = ans/2;
    }
    else ans = temp[(n/2)];

    return ans;
}

//optimal
#include <bits/stdc++.h>

double median(vector<int>& a, vector<int>& b) {
    // Write your code here.
    int n1 = a.size(),n2 = b.size();
    if (n1 > n2) return median(b, a);

    int n = n1 + n2; //total length
    int left = (n1 + n2 + 1) / 2; //length of left half
    //apply binary search:
    int low = 0, high = n1;
    while (low <= high) {
        int mid1 = (low + high) >> 1;
        int mid2 = left - mid1;
        //calculate l1, l2, r1 and r2;
        int l1 = INT_MIN, l2 = INT_MIN;
        int r1 = INT_MAX, r2 = INT_MAX;
        if (mid1 < n1) r1 = a[mid1];
        if (mid2 < n2) r2 = b[mid2];
        if (mid1 - 1 >= 0) l1 = a[mid1 - 1];
        if (mid2 - 1 >= 0) l2 = b[mid2 - 1];

        if (l1 <= r2 && l2 <= r1) {
            if (n % 2 == 1) return max(l1, l2);
            else return ((double)(max(l1, l2) + min(r1, r2))) / 2.0;
        }

        //eliminate the halves:
        else if (l1 > r2) high = mid1 - 1;
        else low = mid1 + 1;
    }
    return 0; //dummy statement
}


