//brute
o(n2)
//better
void inorder(BinaryTreeNode *root,vector<int> &ans){
    if(root==NULL) return;
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);
}

bool pairSumBst(BinaryTreeNode *root, int k)
{
    // Write your code here
    vector<int> ans;
    inorder(root,ans);
    int n = ans.size();

    for(int i=0;i<n;i++){
        int low = i , high = n-1;

        int target= k-ans[i];
        while(low<=high){
            int mid=(low+high)/2;
            if(ans[mid]==target) return true;
            else if(ans[mid]<target) low=mid+1;
            else high=mid-1;
        }
    }
    return false;
}
//optimal - study morris traversal , bst iterator


