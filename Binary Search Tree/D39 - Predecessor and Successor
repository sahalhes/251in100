//brute 
void inorder(TreeNode *root, vector<int> &ans){
    if(root==NULL) return;
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);
}

pair<int, int> predecessorSuccessor(TreeNode *root, int key)
{
    // Write your code here.
    int pre=-1;
    int suc=-1;
    vector<int>ans;
    inorder(root,ans);
    int n = ans.size();

    for(int i=0;i<n;i++){
        if(ans[i]>key && suc==-1) suc=ans[i];
        if(ans[i]<key) pre=ans[i]; 
    }
    return {pre,suc};
}

//optimal

int successor(TreeNode *root, int &suc,int key){

    while(root!=NULL){
        if(key>=root->data){
            root=root->right;
        }
        else{
            suc=root->data;
            root=root->left;
        }
    }
    return suc;

}
int predecessor(TreeNode *root, int &pre,int key){
    while(root != NULL){
        if(key > root->data){
            pre = root->data;
            root = root->right;
        }
        else{
            root = root->left;
        }
    }
    return pre;

}


pair<int, int> predecessorSuccessor(TreeNode *root, int key)
{
    // Write your code here.
    int pre=-1;
    int suc=-1;

    pre=predecessor(root,pre,key);
    suc=successor(root,suc,key);

    return {pre,suc};
    

}