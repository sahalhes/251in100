     bool valid(int x, int y, int n , int m)
  {
      if( x < 0 || y < 0 || x>=n || y>=m)
      {
          return false;
      }
      return true;
  }
    
    int findShortestPath(vector<vector<int>> &mat) {
    // code here
    // Simple BFS -> O(n^2) + queue

    int dir[5] = {0, 1, 0, -1, 0}; // Array for 4-directional movement: right, down, left, up
    int ans = INT_MAX; // Initialize answer to maximum possible value
     int r = mat.size(); // Number of rows in the matrix
    int c = mat[0].size(); // Number of columns in the matrix
    queue<pair<int, pair<int, int>>> q; // Queue to perform BFS, stores pairs of (x, (y, l)), where (x, y) are coordinates and l is path length
    vector<vector<bool>> visited(r, vector<bool>(c, false)); // 2D array to keep track of visited nodes
   

    // Mark all surrounding cells of 0 from 1 to 2
    for (int i = 0; i < r; i++) {
        for (int j = 0; j < c; j++) {
            if (mat[i][j] == 0) {
                if (i - 1 >= 0 && mat[i - 1][j] == 1) mat[i - 1][j] = 2;
                if (i + 1 < r && mat[i + 1][j] == 1) mat[i + 1][j] = 2;
                if (j - 1 >= 0 && mat[i][j - 1] == 1) mat[i][j - 1] = 2;
                if (j + 1 < c && mat[i][j + 1] == 1) mat[i][j + 1] = 2;
            }
        }
    }

    // Push all 1's (start points) into the queue
    for (int i = 0; i < r; i++) {
        if (mat[i][0] == 1) {
            q.push({i, {0, 1}}); // Pushing start points along with their coordinates and path length
            visited[i][0] = true; // Marking start points as visited
        }
    }

    // If there are no start points (no 1's at the leftmost column), return -1
    if (q.empty()) return -1;

    while (!q.empty()) {
        auto it = q.front();
        q.pop();
        int mini = it.second.second; // Current path length

        // If the current position is at the rightmost column, update the minimum path length
        if (it.second.first == c - 1) ans = min(ans, it.second.second);
        
        // Explore adjacent cells
        for (int i = 0; i < 4; i++) {
            int x = dir[i] + it.first; // New x coordinate
            int y = dir[i + 1] + it.second.first; // New y coordinate

            // Check if the new position is valid and not visited, and the cell value is 1 (not a wall)
            if (valid(x, y, r, c) && mat[x][y] == 1 && !visited[x][y]) {
                int curr_min = mini + 1; // Update the path length
                q.push({x, {y, curr_min}}); // Push the new position into the queue along with updated path length
                visited[x][y] = true; // Mark the new position as visited
            }
        }
    }

    // Return -1 if ans is still the maximum value (no path found), otherwise return ans
    return ans == INT_MAX ? -1 : ans;
}