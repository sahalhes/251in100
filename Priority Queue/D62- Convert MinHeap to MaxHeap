//BRUTE (not good as it is given balanced so TLE)

void minHeapToMaxHeap(long *arr, int n)

{

    priority_queue<int> pq;
    for(int i=0; i<n; i++){
        pq.push(arr[i]);
    }
    int j=0;
    while(!pq.empty()){
        arr[j++]=pq.top();
        pq.pop();
    }
}

//optimal 
void heapify(long *arr, int n, int i) 
{
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[largest] < arr[left]) 
    {
        largest = left;
    }
    if (right < n && arr[largest] < arr[right]) 
    {
        largest = right;
    }

    if (i != largest) 
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void buildMaxHeap(long *arr, int n) 
{
    for (int i = n / 2 - 1; i >= 0; i--) 
    {
        heapify(arr, n, i);
    }
}

void minHeapToMaxHeap(long *arr, int n) 
{
    // Build a max heap using the given array
    buildMaxHeap(arr, n);
}
