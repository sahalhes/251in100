#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // Write your code here.
     // adjList contains node, adjNode, weight.

    unordered_map<int,list<pair<int,int>>> adjList;
    for(int i=0; i<m; i++){
        int u=g[i].first.first;
        int v=g[i].first.second;
        int w=g[i].second; 
        adjList[u].push_back({v,w});
        adjList[v].push_back({u,w});
    } 
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int, int>>> pq; // it contains weight for current node ans , current node.
    pq.push({0,1});
    //it stores visited for any node or not (index is working as node also).
    vector<bool> visited(n+1, false);
    //it stores parent of index(or node)
    vector<int> parent(n+1, -1);
    parent[1]=-1;
    vector<int> key(n + 1, INT_MAX);
    key[1] = 0; // Starting node

    while(!pq.empty()){
        int node=pq.top().second;
        int weight=pq.top().first;

        pq.pop();
        if (visited[node])
            continue;
        visited[node]=true;
        for(auto it:adjList[node]){
            int v=it.first;
            int w=it.second; 
            if (!visited[v] && w < key[v]) {
                parent[v] = node;
                key[v] = w;
                pq.push({w, v});
            }
        }
    } 
    //returning answer
    vector<pair<pair<int, int>, int>> ans;
    for(int i=2; i<=n; i++){
        ans.push_back({{parent[i],i}, key[i]});
    }
    return ans;
}
