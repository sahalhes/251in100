//Brute 
#include <bits/stdc++.h>

bool ls(vector<int> &arr, int n,int x){
    for(int i=0;i<n;i++){
        if(arr[i]==x) return true;
    }
    return false;
}

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
    int longest=1;

    for(int i=0;i<n;i++){
        int x = arr[i];
        int cnt=0;
        while(ls(arr,n,x)==true){
            x++;
            cnt++;
        }
        longest = max(longest,cnt);
    }


    return longest;
}

//Better
#include <bits/stdc++.h>

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
    sort(arr.begin(),arr.end());
    int longest=1;
    int cnt=0;
    int small = INT_MIN;

    for(int i=0;i<n;i++){
        if(arr[i]-1==small){
            cnt++;
            small=arr[i];
        }
        else if(arr[i] != small){
            cnt=1;
            small=arr[i];
        }
        longest=max(longest,cnt);
    }

    return longest;
}

//Optimal
#include <bits/stdc++.h>

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
    int longest=1;
    unordered_set<int>st;
    int cnt=1;
    for(int i=0;i<n;i++){
        st.insert(arr[i]);
    }

    for(auto it:st){
        if(st.find(it-1)==st.end()){
            cnt=1;
            int x=it;
            while(st.find(x+1)!=st.end()){
                x++;
                cnt++;
            }
        }
        longest=max(longest,cnt);
    }
    
    return longest;
}